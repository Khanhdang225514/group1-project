// backend/controllers/userController.js

const User = require("../models/User"); // Import model

// üü¢ [GET] /users ‚Üí L·∫•y danh s√°ch ng∆∞·ªùi d√πng
exports.getUsers = async (req, res) => {
  try {
    const users = await User.find();
    res.status(200).json(users);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error.message);
    res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng" });
  }
};

// üü¢ [POST] /users ‚Üí Th√™m ng∆∞·ªùi d√πng m·ªõi
exports.addUser = async (req, res) => {
  const { name, email } = req.body;

  if (!name || !email) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  try {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existing = await User.findOne({ email });
    if (existing) {
      return res.status(409).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    const newUser = await User.create({ name, email });
    res.status(201).json(newUser);
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m ng∆∞·ªùi d√πng:", error.message);
    res.status(500).json({ message: "L·ªói server khi th√™m ng∆∞·ªùi d√πng" });
  }
};

// üü¢ [PUT] /users/:id ‚Üí C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUser = async (req, res) => {
  try {
    const { name, email } = req.body;
    const updatedUser = await User.findByIdAndUpdate(
      req.params.id,
      { name, email },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.status(200).json(updatedUser);
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error.message);
    res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng" });
  }
};

// üü¢ [DELETE] /users/:id ‚Üí X√≥a ng∆∞·ªùi d√πng
exports.deleteUser = async (req, res) => {
  try {
    const deletedUser = await User.findByIdAndDelete(req.params.id);

    if (!deletedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.status(200).json({ message: "‚úÖ ƒê√£ x√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error.message);
    res.status(500).json({ message: "L·ªói server khi x√≥a ng∆∞·ªùi d√πng" });
  }
};
